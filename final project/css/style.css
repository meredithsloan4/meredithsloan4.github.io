@import url('https://fonts.googleapis.com/css?family=Arbutus+Slab|PT+Sans:400,700');

html {
  font-size: 18px;
}

body {
  font-family: "PT Sans", sans-serif;
  color: #222;
  margin-bottom: 3rem;
  font-weigt: 400;
}

#container {
  max-width: 850px;
  margin: 0 auto;
}

a,
a:visited {
  /* color: rgb(15,87,76); */
  color: rgb(0,56,141); /* new image color */
}

h1,
h2,
a:hover {
  /* color: rgb(106,160,127); */
  color: rgba(0,56,141,0.7); /* new image color */
}

h1,
h2 {
  font-family: 'Arbutus Slab', serif;
}

h1 {
  font-size: 48px;
}

h2 {
  font-size: 24px;
}

h2 + p {
  font-weight: 700;
}

header {
  text-align: center;
}

nav {
  border-top: 3px solid #8c8b8b;
  border-bottom: 3px solid #8c8b8b;
  margin-bottom: 1.5rem;
}

nav ul {
  list-style: none;
  padding-left: 0;
  margin: 0.5rem 0;
  display: flex;
  justify-content: center;
}

nav a {
  text-decoration: none;
  padding: 0 3rem;
}

nav a:hover {
  text-decoration: underline;
}


/* default grid setup */

/*

  +============+========+
  | #bio       | #photo |
  +============+========+

*/

main {
  display: grid;
  grid-template-columns: 1fr 320px;
  grid-column-gap: 60px;
}

#photo img {
  border: 1px solid #bbb;
  /* transform: rotate(2deg); */
  box-shadow: 2px 2px 2px #ddd;
  margin-right: 20px;
}

/* #picture img { */
  /* border: 1px solid #bbb; */
  /* transform: rotate(2deg); */
  /* box-shadow: 2px 2px 2px #ddd; */
  /* margin-right: 20px; */
}
#resume main {
  grid-template-columns: repeat(2, 1fr);
  /* grid-column-gap: 0; */
  grid-gap: 20px;
  grid-auto-flow: row;
}

#resume #work {
  grid-column: 1/-1;
}

#resume #skills {
  order: 2;
}

#resume #leadership {
  order: 1;
}

/* grid setup for packages.html */

/*

  +============+
  | h2         |
  +============+
  | iframe | p |
  +========+===+

  This is admittedly a teeny bit more complex than index.html. However,
  ypu can see it is possible to create tiny layouts, have some parts
  stretch across the entire grid (i.e. h2) and divide the remaining
  columns accordingly.

  In this case, the video is 600px and the text takes up whatever is
  left in the space available to it.

  (I had to overwrite main's display property, otherwise it would make
  things break.)

*/
#reel main {
  display: block;
}

#reel main section {
  display: grid;
  grid-template-columns: 600px 1fr;
  grid-gap: 20px;
  margin-bottom: 3rem;
}

#reel main section h2 {
  margin: 0;
  grid-column: 1 / -1;
}

#reel main section p {
  margin-top: 0;
  line-height: 1.5;
}

#packages main {
  display: block;
}

#packages main section {
  display: grid;
  grid-template-columns: 600px 1fr;
  grid-gap: 20px;
  margin-bottom: 3rem;
}

#packages main section h2 {
  margin: 0;
  grid-column: 1 / -1;
}

#packages main section p {
  margin-top: 0;
  line-height: 1.5;
}


/* tablet devices (and smaller) */

@media(max-width: 769px) {

  #packages main section {
    grid-template-columns: 1fr;
  }

  /*
    Here's where this gets cool. When you compress the page, everything
    stacks on top of each other (i.e. h2, video, text).

    We'd have to write a little script to re-size the video to adjust
    when the page is re-sized ... because right now it is set inside
    the iframe to be 600px; it's not flexible.
  */
#packages main section p {
  width: 600px;
}

}



/* css grid warning */

.grid-warning {
  background-color: rgba(0,56,141,0.3);
  padding: 0.1rem;
  font-size: 0.8rem;
  margin-bottom: 2rem;
}

.grid-warning a {
  font-weight: bold;
}

@supports(display: grid) {
  .grid-warning {
    display: none;
  }
}

/*
  All modern browsers support grid. However, if a user visits the site
  with a browser which does not support grid, a little message will
  appear.

  If you want to actually see this in action comment out the 'main'
  CSS block from lines 87-91.
*/
